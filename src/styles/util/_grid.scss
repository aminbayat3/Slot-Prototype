@use "sass:math";
@use "breakpoints" as b;
@use "functions" as f;

$grid-columns: 12;

$grid-gaps: (
  "0": 0,
  "1": f.rem(10),
  "2": f.rem(20),
  "3": f.rem(30),
);

$layout-values: flex-start, flex-end, center, space-between, space-around;

// base layout classes
.container {
  width: 100%;
  max-width: f.rem(1500);
  margin: 0 auto;
  box-sizing: border-box;
  padding: 0 f.rem(16);
}

.row {
  display: flex;
  flex-flow: row wrap;
}

// grid gaps
@each $key, $val in $grid-gaps {
  .gapx-#{$key} > * {
    padding-left: $val;
    padding-right: $val;
  }
  .gapx-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}

// we need to use gaps instead of mx and my to make sure the grid system works as expected

@each $key, $val in $grid-gaps {
  .gapy-#{$key} > * {
    padding-top: $val;
    padding-top: $val;
  }
  .gapy-#{$key} {
    margin-top: -$val;
    margin-bottom: -$val;
  }
}

// justify-content classes
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}

@each $breakpoint, $bValue in b.$breakpoints_up {
  @include b.breakpoint-up($breakpoint) {
    @each $val in $layout-values {
      .justify-#{$breakpoint}-#{$val} {
        justify-content: $val;
      }
    }
  }
}

// col classes
//default
@for $i from 1 through $grid-columns {
  .col-#{$i} {
    box-sizing: border-box;
    flex-grow: 0;
    width: math.div($i * 100%, $grid-columns);
  }
}

@each $breakpoint, $bValue in b.$breakpoints_up {
  @include b.breakpoint-up($breakpoint) {
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        box-sizing: border-box;
        flex-grow: 0;
        width: math.div($i * 100%, $grid-columns);
      }
    }
  }
}
